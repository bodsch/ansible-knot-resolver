-- {{ ansible_managed }}
--
-- Refer to manual: https://knot-resolver.readthedocs.org/en/stable/

{% if knot_resolver_log_level is defined and
      knot_resolver_log_level | length > 0 %}
log_level('{{ knot_resolver_log_level }}')
{% endif %}
{% if knot_resolver_log_target is defined and
      knot_resolver_log_target | length > 0 %}
log_target('{{ knot_resolver_log_target }}')
{% endif %}

user(
  '{{ knot_resolver_owner }}',
  '{{ knot_resolver_group }}'
)

{% if knot_resolver_support_ipv6 %}
net.ipv6 = true
{% else %}
net.ipv6 = false
{% endif %}

{% if knot_resolver_listener is defined and
      knot_resolver_listener | count > 0 %}
{% for listener in knot_resolver_listener %}
net.listen({{ listener | resolver_listener }})
{% endfor %}
{% endif %}

{%- if knot_resolver_support_ipv6 %}
net.listen('::1', 53, { kind = 'dns', freebind = true })
net.listen('::1', 853, { kind = 'tls', freebind = true })
{% endif %}

{%- if knot_resolver_service_ip4 is defined and
    knot_resolver_service_ip4 | length > 0 %}
net.listen('{{ knot_resolver_service_ip4 }}', 53, { kind = 'dns' })
net.listen('{{ knot_resolver_service_ip4 }}', 853, { kind = 'tls' })
{% endif %}

-- Load useful modules
modules = {
   'stats',                  -- Track internal statistics
   'predict',                -- Prefetch expiring/frequent records
   'serve_stale < cache',
   'workarounds < iterate',
   'hints > iterate',        -- Load /etc/hosts and allow custom root hints
}

cache.open( {{ knot_resolver_cache.size }} * MB, 'lmdb://{{ knot_resolver_cache.directory }}')

{% if knot_resolver_cache.max_ttl is defined %}
cache.max_ttl({{ knot_resolver_cache.max_ttl | int }})
{% endif %}

{% if knot_resolver_enable_prometheus is defined and
      knot_resolver_enable_prometheus %}
modules.load('http')
-- Set Prometheus namespace
http.prometheus.namespace = 'resolver_'
http.config()
{% endif %}

-- Prefetch learning
predict.config({
  window = 90,        -- 90 minutes sampling window
  period = 48*(60/15) -- track last 48 hours
})

{% if knot_resolver_views is defined and
    knot_resolver_views | length > 0 %}
modules.load('view')
{% for view in knot_resolver_views %}
{%- if view.pass  is defined and view.pass | count > 0%}
{% for k,v in view.items() %}
{% for ip in v %}
view:addr('{{ ip }}', policy.all(policy.PASS))
{% endfor %}
{% endfor %}
{% endif %}
{% if view.drop  is defined and view.drop | count > 0%}
{% for k,v in view.items() %}
{% for ip in v %}
view:addr('{{ ip }}', policy.all(policy.DROP))
{% endfor %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}

-- policy.add(
--   policy.suffix(
--     policy.REQTRACE, policy.todnames({'.'})
--   )
-- )

{% if knot_resolver_internal_domain is defined and
    knot_resolver_internal_domain | length > 0 %}
-- define list of internal-only domains
-- forward only queries for names under domain example.com to a single IP address
{% for domain in knot_resolver_internal_domain %}
policy.add(
    policy.suffix(
{% if domain.policy.forward is defined %}
        policy.FORWARD('{{ domain.policy.forward | default('127.0.1.1@53') }}'),
{% elif domain.policy.stub is defined %}
        policy.STUB('{{ domain.policy.stub | default('127.0.1.1@53') }}'),
{% endif %}
        policy.todnames({ '{{ domain.domains | join("', '") }}' })
    )
)
{% endfor %}
{% endif %}

-- Block Firefox DoH
policy.add(
  policy.suffix(
    policy.DENY, { todname('use-application-dns.net') }
  )
)
